# Projectoverzicht: Flask MCP-integratie Applicatie

Deze applicatie is een Flask-webapplicatie die gebruikers in staat stelt om met LLM-modellen (OpenAI en Anthropic) te communiceren via een eenvoudige webinterface. De applicatie verrijkt gebruikersprompts met contextinformatie door gebruik te maken van Model Context Protocol (MCP)-servers voor Brave Search en GitHub.

## Architectuur: Modulestructuur

De applicatie is opgebouwd uit de volgende modules:

### 1. Hoofdapplicatie
- Status: Functioneel met verbeterde foutafhandeling en dotenv-ondersteuning
- Bestandsnaam: app.py
- Functionaliteit: 
  - Beheert de web interface en routing
  - Verwerkt gebruikersinvoer en versturen naar LLM-modellen
  - Beheert de opstarten/afsluiten van MCP-servers
  - Verrijkt prompts met context uit MCP-servers
  - Ondersteunt zowel nieuwere als oudere versies van Anthropic API
  - Biedt robuuste foutafhandeling voor ontbrekende modules of API-sleutels
  - Ondersteunt .env bestandsconfiguratie via dotenv
- Afhankelijkheden: 
  - Flask, requests, openai, anthropic, python-dotenv
  - brave_mcp_server.py, github_mcp_server.py

### 2. Brave Search MCP-server
- Status: Functioneel met verbeterde foutafhandeling
- Bestandsnaam: brave_mcp_server.py
- Functionaliteit:
  - Implementeert een HTTP-server die verzoeken ontvangt en verwerkt
  - Communiceert met de Brave Search API
  - Functioneert als een MCP-compatibele zoekdienst
  - Biedt duidelijke foutmeldingen bij ontbrekende afhankelijkheden
- Afhankelijkheden:
  - Flask, requests
  - BRAVE_API_KEY in omgevingsvariabelen of .env bestand

### 3. GitHub MCP-server
- Status: Functioneel met verbeterde foutafhandeling
- Bestandsnaam: github_mcp_server.py
- Functionaliteit:
  - Implementeert een HTTP-server voor GitHub API-interacties
  - Biedt MCP-compatibele endpoints voor repository-zoeken en code-zoeken
  - Biedt duidelijke foutmeldingen bij ontbrekende afhankelijkheden
- Afhankelijkheden:
  - Flask, requests
  - Optioneel: GITHUB_TOKEN in omgevingsvariabelen of .env bestand

### 4. MCP-server Beheertool
- Status: Nieuw toegevoegd
- Bestandsnaam: manage_mcp_servers.py
- Functionaliteit:
  - Biedt command-line interface voor beheer van MCP-servers
  - Ondersteunt starten, stoppen en statuscontrole van servers
  - Handhaaft processen tussen applicatie-herstart
  - Gebruikt dezelfde Python-interpreter als de hoofdapplicatie
  - Bevat uitgebreide diagnostiek voor virtuele omgevingen
- Afhankelijkheden:
  - requests
  - Hetzelfde Python-executable als de hoofdapplicatie

### 5. Webinterface
- Status: Functioneel
- Bestandsnaam: templates/index.html
- Functionaliteit:
  - Biedt gebruikersvriendelijke interface voor LLM-interactie
  - Geeft mogelijkheden voor modelselectie en promptinvoer
  - Beheer van MCP-tools (starten/stoppen)
  - Tonen van antwoorden en volledige prompts met context
- Afhankelijkheden:
  - HTML, CSS, JavaScript

### 6. Configuratie
- Status: Beschikbaar als voorbeeld met dotenv-ondersteuning
- Bestandsnaam: .env.example
- Functionaliteit:
  - Dient als sjabloon voor API-sleutelconfiguratie
  - Ondersteunt dotenv-functionaliteit voor eenvoudige configuratie
- Afhankelijkheden:
  - python-dotenv

### 7. Projectdocumentatie
- Status: Bijgewerkt met uitgebreide virtuele omgeving troubleshooting
- Bestandsnaam: README.md
- Functionaliteit:
  - Beschrijft projectfunctionaliteiten en installatie/gebruiksinstructies
  - Bevat gedetailleerde installatie-instructies met virtuele omgeving
  - Bevat troubleshooting-informatie voor veelvoorkomende problemen
  - Uitgebreide sectie over virtuele omgeving problemen oplossen
- Afhankelijkheden: Geen

### 8. Dependentiemanagement
- Status: Beschikbaar
- Bestandsnaam: requirements.txt
- Functionaliteit:
  - Definieert de benodigde Python-pakketten voor de applicatie
- Afhankelijkheden: Geen
